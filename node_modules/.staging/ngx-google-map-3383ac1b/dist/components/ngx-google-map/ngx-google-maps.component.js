import { Component, ViewChild, Input, Output, EventEmitter } from '@angular/core';
var NgxGoogleMapComponent = /** @class */ (function () {
    function NgxGoogleMapComponent() {
        this.mapType = 'ROADMAP';
        this.multiplePlaces = false;
        this.mapClick = new EventEmitter();
        this.markerClick = new EventEmitter();
        this.locationSelected = new EventEmitter();
        this.mapOptions = {
            center: new google.maps.LatLng(51.5073391, -0.1284288),
            zoom: 16,
            mapTypeControl: true
        };
        this.markers = [];
        this.infoWindow = null;
        this.selectedLocations = [];
        console.log('Initializing Map');
    }
    NgxGoogleMapComponent.prototype.ngOnInit = function () {
        this.mapOptions.mapTypeId = google.maps.MapTypeId[this.mapType];
        this.mapOptions.mapTypeControlOptions = {
            style: google.maps.MapTypeControlStyle.HORIZONTAL_BAR,
            position: google.maps.ControlPosition.LEFT_BOTTOM
        };
        this.mapInstance = new google.maps.Map(this.mapElement.nativeElement, this.mapOptions);
        this.initMap();
    };
    NgxGoogleMapComponent.prototype.initMap = function () {
        this.addSearchBox();
        this.addDoneButton();
        this.initMapEvents();
    };
    NgxGoogleMapComponent.prototype.initMapEvents = function () {
        var _this = this;
        google.maps.event.addListener(this.mapInstance, 'click', function (event) {
            _this.placeMarkerAndPanTo(event.latLng);
            _this.mapClick.emit(event);
            console.log(event);
        });
    };
    NgxGoogleMapComponent.prototype.addDoneButton = function () {
        var _this = this;
        var controlUI = this.doneButton.nativeElement;
        controlUI.index = 1;
        controlUI.addEventListener('click', function (event) {
            _this.locationSelected.emit({ event: event, locations: _this.selectedLocations });
            console.log(_this.selectedLocations);
        });
        this.mapInstance.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(controlUI);
    };
    NgxGoogleMapComponent.prototype.placeMarkerAndPanTo = function (latLang) {
        if (!this.multiplePlaces) {
            this.clearMarkers();
        }
        var marker = new google.maps.Marker({
            position: latLang,
            map: this.mapInstance,
            draggable: true
        });
        this.markers.push(marker);
        this.getMarketLocation(marker);
        this.addClickToMarker(marker);
        this.addDragToMarker(marker);
        this.mapInstance.panTo(latLang);
    };
    NgxGoogleMapComponent.prototype.addDragToMarker = function (marker) {
        var _this = this;
        google.maps.event.addListener(marker, 'dragend', function (event) {
            _this.getMarketLocation(marker);
        });
    };
    NgxGoogleMapComponent.prototype.getMarketLocation = function (marker) {
        var currentLocation = marker.getPosition();
        var pos = {};
        // Add lat and lng values to a field that we can save.
        pos.latitude = currentLocation.lat(); // latitude
        pos.longitude = currentLocation.lng();
        if (this.multiplePlaces) {
            this.selectedLocations.push(pos);
            return;
        }
        this.selectedLocations[0] = pos;
    };
    NgxGoogleMapComponent.prototype.addClickToMarker = function (marker) {
        var _this = this;
        var geocoder = new google.maps.Geocoder();
        google.maps.event.addListener(marker, 'click', function (event) {
            if (_this.infoWindow) {
                _this.infoWindow.close();
            }
            _this.infoWindow = new google.maps.InfoWindow();
            if (event) {
                _this.getFromattedAddress(geocoder, event.latLng.toUrlValue(), _this.infoWindow);
            }
            _this.infoWindow.open(_this.mapInstance, marker);
            _this.markerClick.emit(event);
            console.log(event);
        });
    };
    NgxGoogleMapComponent.prototype.addSearchBox = function () {
        this.mapSearchBox = new google.maps.places.SearchBox(this.searchInput.nativeElement);
        this.mapInstance.controls[google.maps.ControlPosition.TOP_LEFT]
            .push(this.searchInput.nativeElement);
        this.addSearchEvent();
    };
    NgxGoogleMapComponent.prototype.getFromattedAddress = function (geocoder, latlang, infowindow) {
        var latlngStr = latlang.split(',');
        var latlng = { lat: parseFloat(latlngStr[0]), lng: parseFloat(latlngStr[1]) };
        geocoder.geocode({ location: latlng }, function (results, status) {
            if (status === 'OK') {
                if (results[0]) {
                    infowindow.setContent(results[0].formatted_address);
                }
            }
        });
    };
    NgxGoogleMapComponent.prototype.addSearchEvent = function () {
        var _this = this;
        this.mapSearchBox.addListener('places_changed', function () {
            _this.searchPlace();
        });
    };
    NgxGoogleMapComponent.prototype.clearMarkers = function () {
        var _this = this;
        this.markers.forEach(function (marker, index) {
            marker.setMap(null);
            _this.markers.splice(index, 1);
        });
    };
    NgxGoogleMapComponent.prototype.searchPlace = function () {
        var _this = this;
        var places = this.mapSearchBox.getPlaces();
        if (places.length === 0) {
            return;
        }
        this.clearMarkers();
        var bounds = new google.maps.LatLngBounds();
        places.forEach(function (place) {
            if (!place.geometry) {
                console.log('Returned place contains no geometry');
                return;
            }
            var icon = {
                url: place.icon,
                size: new google.maps.Size(71, 71),
                origin: new google.maps.Point(0, 0),
                anchor: new google.maps.Point(17, 34),
                scaledSize: new google.maps.Size(25, 25)
            };
            _this.placeMarkerAndPanTo(place.geometry.location);
            if (place.geometry.viewport) {
                // Only geocodes have viewport.
                bounds.union(place.geometry.viewport);
            }
            else {
                bounds.extend(place.geometry.location);
            }
        });
        this.mapInstance.fitBounds(bounds);
    };
    NgxGoogleMapComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-google-map',
                    template: "\n    <div class=\"maps-wrapper\">\n      <div class=\"search-field\">\n        <input id='pac-input' class='search-box' type=\"text\" #searchBox>\n      </div>\n      <button class=\"done-button\" #doneBtn>Done</button>\n      <div #map class=\"map\">\n      </div>\n    </div>\n  ",
                    styles: ["\n    .maps-wrapper{padding:10px;max-width:100%}.maps-wrapper .map{min-width:300px;min-height:300px}.search-box{box-sizing:border-box;display:block;width:75%;min-width:200px !important;padding:0.1em 0.5em;margin-top:10px;font-size:1rem;line-height:1.5;color:#495057;background-color:#fff;background-clip:padding-box;border:1px solid #ced4da;border-radius:.25rem;transition:border-color .15s ease-in-out, box-shadow .15s ease-in-out}.search-box:focus{color:#495057;background-color:#fff;border-color:#80bdff;outline:0;box-shadow:0 0 0 0.2rem rgba(0,123,255,0.25)}.done-button{direction:ltr;overflow:hidden;text-align:center;position:relative;color:#000;font-family:Roboto, Arial, sans-serif;user-select:none;font-size:11px;background-color:#fff;padding:9px;border:none;margin-bottom:38px;background-clip:padding-box;box-shadow:rgba(0,0,0,0.3) 0px 1px 4px -1px;min-width:21px;font-weight:500}.done-button:hover{background:lightgray}\n  "]
                },] },
    ];
    /** @nocollapse */
    NgxGoogleMapComponent.ctorParameters = function () { return []; };
    NgxGoogleMapComponent.propDecorators = {
        'mapType': [{ type: Input },],
        'multiplePlaces': [{ type: Input },],
        'mapClick': [{ type: Output },],
        'markerClick': [{ type: Output },],
        'locationSelected': [{ type: Output },],
        'mapElement': [{ type: ViewChild, args: ['map',] },],
        'searchInput': [{ type: ViewChild, args: ['searchBox',] },],
        'doneButton': [{ type: ViewChild, args: ['doneBtn',] },],
    };
    return NgxGoogleMapComponent;
}());
export { NgxGoogleMapComponent };
//# sourceMappingURL=ngx-google-maps.component.js.map